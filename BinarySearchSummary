When doing binary search, don't forget to sort the array first;

Search left bound
while(start <= end){
    int mid = start + (end-start)/2;
    if(target <= nums[mid] ){
        if(target == nums[mid]){
            result[0] = mid;
        }
        end = mid-1;
    }else{
        start = mid +1;
    }
}

Search insert position
public int searchInsert(int[] nums, int target) {
    int start = 0;
    int end = nums.length - 1;
    while(start <= end){
        int mid = (start + end) / 2;
        if(nums[mid] < target){
            start = mid + 1;
        }else{
            end = mid - 1;
        }
    }
    return start;// This is start !!!
}

Search minimum elements in rotated array
public int findMin2(int[] nums) {
    int start = 0, end = nums.length - 1, mid;
    while (start < end) {
        mid = (start + end) / 2;
        if (nums[mid] > nums[end])
            start = mid + 1;
        else
            end = mid;
    }
    return nums[start];
}

Arrays.binarySearch()
for(int[] envelope : envelopes){
    int index = Arrays.binarySearch(dp, 0, len, envelope[1]);
    if(index < 0)
        index = -(index + 1);
    dp[index] = envelope[1];
    if(index == len)
        len++;
}

In a rotated sorted array

find the minimum:
compare mid with end

find an element
try to find the pure increasing half of the array
compare target with start and mid

http://www.cnblogs.com/zichi/p/5118032.html
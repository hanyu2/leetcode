DFS
public List<List<Integer>> levelOrderBottom(TreeNode root) {
    List<List<Integer>> wrapList = new LinkedList<List<Integer>>();
    levelMaker(wrapList, root, 0);
    return wrapList;
}

public void levelMaker(List<List<Integer>> list, TreeNode root, int level) {
    if(root == null) return;
    if(level >= list.size()) {
        list.add(0, new LinkedList<Integer>());
    }
    levelMaker(list, root.left, level+1);
    levelMaker(list, root.right, level+1);
    list.get(list.size()-level-1).add(root.val);
}

validate binary search tree
public boolean isValidBST(TreeNode root) {
    Stack<TreeNode> stack = new Stack<TreeNode> ();
       TreeNode cur = root ;
       TreeNode pre = null ;           
       while (!stack.isEmpty() || cur != null) {               
           if (cur != null) {
               stack.push(cur);
               cur = cur.left ;
           } else {                
               TreeNode p = stack.pop() ;
               if (pre != null && p.val <= pre.val) {                      
                   return false ;
               }                   
               pre = p ;                       
               cur = p.right ;
           }
       }
    return true ; 
}

PRE ORDER TRAVERSE
public List<Integer> preorderTraversal(TreeNode root) {
    List<Integer> result = new ArrayList<>();
    Deque<TreeNode> stack = new ArrayDeque<>();
    TreeNode p = root;
    while(!stack.isEmpty() || p != null) {
        if(p != null) {
            stack.push(p);
            result.add(p.val);  // Add before going to children
            p = p.left;
        } else {
            TreeNode node = stack.pop();
            p = node.right;   
        }
    }
    return result;
}

IN ORDER TRAVERSE
List<Integer> list = new ArrayList<Integer>();

	    Stack<TreeNode> stack = new Stack<TreeNode>();
	    TreeNode cur = root;

	    while(cur!=null || !stack.empty()){
	        while(cur!=null){
	            stack.add(cur);
	            cur = cur.left;
	        }
	        cur = stack.pop();
	        list.add(cur.val);
	        cur = cur.right;
	    }

	    return list;

POST ORDER TRAVERSE
public List<Integer> postorderTraversal(TreeNode root) {
    LinkedList<Integer> result = new LinkedList<>();
    Deque<TreeNode> stack = new ArrayDeque<>();
    TreeNode p = root;
    while(!stack.isEmpty() || p != null) {
        if(p != null) {
            stack.push(p);
            result.addFirst(p.val);  // Reverse the process of preorder
            p = p.right;             // Reverse the process of preorder
        } else {
            TreeNode node = stack.pop();
            p = node.left;           // Reverse the process of preorder
        }
    }
    return result;
}